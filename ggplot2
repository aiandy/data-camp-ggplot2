# data-camp-ggplot2

# A scatter plot has been made for you
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point()

# Replace ___ with the correct vector
ggplot(mtcars, aes(x = wt, y = mpg, col =disp)) +geom_point()

# Replace ___ with the correct vector
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
  geom_point()
  
  ggplot(mtcars, aes(x = wt, y = mpg, shape = disp)) +
  geom_point()
###shape can only be used in categorical variable
  
# Explore the diamonds data frame with str()
str(diamonds)

# Add geom_point() with +
ggplot(diamonds, aes(x = carat, y = price))+geom_point()


# Add geom_point() and geom_smooth() with +
ggplot(diamonds, aes(x = carat, y = price))+geom_point()+geom_smooth()



# The plot you created in the previous exercise
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth()

# Copy the above command but show only the smooth line
ggplot(diamonds,aes(x=carat,y=price))+geom_smooth()


# Copy the above command and assign the correct value to col in aes()
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+geom_smooth()


# Keep the color settings from previous command. Plot only the points with argument alpha.
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+geom_point(alpha=0.4)


# Create the object containing the data and aes layers: dia_plot
dia_plot<-ggplot(diamonds,aes(x=carat,y=price))

# Add a geom layer with + and geom_point()
dia_plot<-ggplot(diamonds,aes(x=carat,y=price))+geom_point()

# Add the same geom layer, but with aes() inside
dia_plot<-ggplot(diamonds,aes(x=carat,y=price))+geom_point(aes(col=clarity))


set.seed(1)

# The dia_plot object has been created for you
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))

# Expand dia_plot by adding geom_point() with alpha set to 0.2
dia_plot<-dia_plot+geom_point(alpha=0.2)


# Plot dia_plot with additional geom_smooth() with se set to FALSE
dia_plot<-dia_plot+geom_smooth(se=FALSE)

# Copy the command from above and add aes() with the correct mapping to geom_smooth()
dia_plot<-dia_plot+geom_smooth(se=FALSE,aes(col=clarity))

# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Measure) #facet是指维度，可以做出来两个图。
  
#We'll use two functions from the tidyr package:
#gather() rearranges the data frame by specifying the columns that are categorical variables with a - notation. Complete the command. Notice that only one variable is categorical in iris.
#separate() splits up the new key column, which contains the former headers, according to .. The new column names "Part" and "Measure" are given in a character vector. Don't forget the quotes.
# Load the tidyr package
library(tidyr)
# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
  gather(key, Value, -Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
  
 #Look at the heads of iris, iris.wide and iris.tidy using head().
#Fill in the ggplot function with the appropriate data frame and variable names. The names of the aesthetics of the plot will match with variable names in our dataset. The previous instruction will help you match variable names in datasets with the ones in the plot.
# Consider the head of iris, iris.wide and iris.tidy (in that order)
head(iris)
head(iris.wide)
head(iris.tidy)

# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Species)
